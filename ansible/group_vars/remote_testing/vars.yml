---
# Variables shared across all remote_testing hosts

# admin is the default user for the AWS Debian Jessie AMI
ansible_user: admin

# If you are the picoCTF platform remotely you may have a private repository.
# You likely want to configure a read only deployment key, or a machine key.
private_repo: True
deploy_private_key_file: "deploy.picoCTF.private-repo.id_rsa"

##
# Web settings (env specific)
##
web_fqdn: "CHANGE_ME"
nginx_server_name: "{{ web_fqdn }}"
flask_app_server_name: "{{ web_fqdn }}"
#[TODO] refactor based on "facts"
web_address: "{{ web_fqdn }}"
web_address_internal: "http://10.0.1.10"
htpasswd_accounts: "{{ vault_htpasswd_accounts }}"

# optional web automation
enable_basic_auth:      True
auto_add_shell:         True
auto_load_problems:     True
auto_start_competition: True


###
# Shell Settings (env specific)
###
shell_hostname: "CHANGE_ME"
shell_name: Remote-Testing-Shell
shell_host: "{{ shell_hostname }}"
shell_user: "{{ ansible_user }}"

# These sensitive variables are loaded from an ansible-vault encrypted file
# This is an example of a secure way to deploy your configuration secrets
# For this public example the vault password is "pico" so you can see this in
# action. You are highly encouraged to rekey this file prior to use.
# For more information: http://docs.ansible.com/ansible/playbooks_vault.html
shell_pass: "{{ vault_shell_pass }}"
shell_admin_password_crypt: "{{ vault_shell_admin_password_crypt }}"
shell_manager_deploy_secret: " {{ vault_shell_manager_deploy_secret }}"

##
# Problem Settings (env specific)
##
problem_source_dirs:
  - "{{ pico_base_dir }}/picoCTF-problems/Examples"

bundles:
  - {
    source: "{{ pico_base_dir }}/picoCTF-problems/Examples/Bundles/challenge-sampler.json",
    name: "challenge-sampler",
    instances: 2
  }
  - {
    source: "{{ pico_base_dir }}/picoCTF-problems/Examples/Bundles/challenge-sampler-tools.json",
    name: "challenge-sampler-tools",
    instances: 1
  }


##
# Database settings (env specific)
##
on_aws: True
db_private_ip: 127.0.0.1
picoAdmin_db_password:  "insecure-password"
picoWeb_db_password:    "insecure-password"

env_db_users:
  - {
    name: picoWeb,
    password: "{{ picoWeb_db_password }}",
    roles: readWrite,
    database: "{{ picoCTF_db_name }}"
  }
