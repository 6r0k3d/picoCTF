88.331 run_profiling  profile.py:68
├─ 78.811 submit_key  api/problem.py:263
│  ├─ 53.838 get_unlocked_pids  api/problem.py:523
│  │  ├─ 31.029 get_solved_problems  api/problem.py:510
│  │  │  └─ 30.427 get_solved_pids  api/problem.py:496
│  │  │     └─ 30.316 wrapper  api/cache_redis.py:130
│  │  │        ├─ 16.377 set  api/cache_redis.py:62
│  │  │        │  ├─ 14.626 dumps  bson/json_util.py:113
│  │  │        │  │  ├─ 13.540 _json_convert  bson/json_util.py:149
│  │  │        │  │  │  └─ 13.499 <genexpr>  bson/json_util.py:156
│  │  │        │  │  │     └─ 13.441 _json_convert  bson/json_util.py:149
│  │  │        │  │  │        └─ 12.919 __init__  bson/son.py:85
│  │  │        │  │  │           └─ 12.713 update  bson/son.py:183
│  │  │        │  │  │              ├─ 9.794 <genexpr>  bson/json_util.py:154
│  │  │        │  │  │              │  └─ 9.326 _json_convert  bson/json_util.py:149
│  │  │        │  │  │              │     └─ 6.904 default  bson/json_util.py:199
│  │  │        │  │  │              └─ 1.749 __setitem__  bson/son.py:102
│  │  │        │  │  └─ 1.031 dumps  json/__init__.py:182
│  │  │        │  │     └─ 0.997 encode  json/encoder.py:175
│  │  │        │  │        └─ 0.920 iterencode  json/encoder.py:197
│  │  │        │  └─ 1.710 setex  redis/client.py:1012
│  │  │        │     └─ 1.628 execute_command  redis/client.py:522
│  │  │        │        └─ 1.039 send_command  redis/connection.py:530
│  │  │        ├─ 12.313 get_submissions  api/problem.py:321
│  │  │        │  └─ 10.277 __next__  pymongo/cursor.py:1034
│  │  │        │     └─ 10.171 _refresh  pymongo/cursor.py:960
│  │  │        │        └─ 9.807 __send_message  pymongo/cursor.py:885
│  │  │        │           └─ 9.611 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │        │              └─ 8.925 __send_and_receive  pymongo/mongo_client.py:1166
│  │  │        └─ 1.405 get  api/cache_redis.py:44
│  │  │           └─ 1.318 get  redis/client.py:803
│  │  │              └─ 1.300 execute_command  redis/client.py:522
│  │  │                 └─ 0.898 send_command  redis/connection.py:530
│  │  ├─ 13.253 wrapper  api/cache_redis.py:130
│  │  │  └─ 13.034 get  api/cache_redis.py:44
│  │  │     ├─ 11.443 loads  bson/json_util.py:128
│  │  │     │  └─ 11.376 loads  json/__init__.py:271
│  │  │     │     └─ 11.172 decode  json/decoder.py:338
│  │  │     │        └─ 11.062 raw_decode  json/decoder.py:349
│  │  │     │           └─ 7.990 <lambda>  bson/json_util.py:145
│  │  │     │              └─ 6.049 object_hook  bson/json_util.py:163
│  │  │     └─ 1.496 get  redis/client.py:803
│  │  │        └─ 1.474 execute_command  redis/client.py:522
│  │  └─ 4.237 <genexpr>  api/problem.py:541
│  ├─ 6.861 get_user  api/user.py:88
│  │  ├─ 4.590 find_one  pymongo/collection.py:681
│  │  │  └─ 3.781 __next__  pymongo/cursor.py:1034
│  │  │     └─ 3.694 _refresh  pymongo/cursor.py:960
│  │  │        └─ 3.373 __send_message  pymongo/cursor.py:885
│  │  │           └─ 2.768 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │              └─ 1.649 __send_and_receive  pymongo/mongo_client.py:1166
│  │  └─ 1.330 get_conn  api/common.py:32
│  │     └─ 1.297 alive  pymongo/mongo_client.py:963
│  ├─ 5.217 wrapper  api/cache_redis.py:130
│  │  ├─ 2.271 get_submissions  api/problem.py:321
│  │  │  └─ 1.750 __next__  pymongo/cursor.py:1034
│  │  │     └─ 1.737 _refresh  pymongo/cursor.py:960
│  │  │        └─ 1.664 __send_message  pymongo/cursor.py:885
│  │  │           └─ 1.606 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │              └─ 1.419 __send_and_receive  pymongo/mongo_client.py:1166
│  │  ├─ 1.685 get  api/cache_redis.py:44
│  │  │  └─ 1.377 get  redis/client.py:803
│  │  │     └─ 1.355 execute_command  redis/client.py:522
│  │  │        └─ 0.886 send_command  redis/connection.py:530
│  │  └─ 1.089 set  api/cache_redis.py:62
│  ├─ 3.772 insert  pymongo/collection.py:291
│  │  └─ 3.078 _send_message  pymongo/mongo_client.py:1086
│  ├─ 2.696 validate  api/common.py:186
│  │  └─ 2.674 __call__  voluptuous.py:213
│  │     └─ 2.658 validate_dict  voluptuous.py:431
│  │        └─ 2.622 validate_mapping  voluptuous.py:258
│  │           └─ 1.421 validate_callable  voluptuous.py:548
│  ├─ 2.668 get_solved_pids  api/problem.py:496
│  │  └─ 2.587 wrapper  api/cache_redis.py:130
│  │     └─ 2.436 get  api/cache_redis.py:44
│  │        ├─ 1.233 get  redis/client.py:803
│  │        │  └─ 1.215 execute_command  redis/client.py:522
│  │        └─ 1.138 loads  bson/json_util.py:128
│  │           └─ 1.068 loads  json/__init__.py:271
│  └─ 1.368 invalidate_memoization  api/cache.py:106
│     └─ 1.227 delete  redis/client.py:766
│        └─ 1.196 execute_command  redis/client.py:522
└─ 9.454 wrapper  api/cache_redis.py:130
   ├─ 7.465 get  api/cache_redis.py:44
   │  └─ 7.330 loads  bson/json_util.py:128
   │     └─ 7.326 loads  json/__init__.py:271
   │        └─ 7.301 decode  json/decoder.py:338
   │           └─ 7.283 raw_decode  json/decoder.py:349
   │              └─ 6.193 <lambda>  bson/json_util.py:145
   │                 └─ 4.754 object_hook  bson/json_util.py:163
   └─ 1.764 get_all_team_scores  api/scoreboard.py:61
      └─ 1.731 get_score  api/scoreboard.py:10
         └─ 1.709 get_solved_problems  api/problem.py:510
            └─ 1.698 get_solved_pids  api/problem.py:496
               └─ 1.688 wrapper  api/cache_redis.py:130
                  └─ 1.030 get_submissions  api/problem.py:321
Timer unit: 1e-06 s

File: /home/vagrant/api/api/cache.py
Function: memoize at line 69
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    69                                           def memoize(timeout=0, serialize=True, deserialize=True):
    70                                               """
    71                                               Cache a function based on its arguments.
    72                                           
    73                                               Args:
    74                                                   timout: Time the result stays valid in the cache.
    75                                               Returns:
    76                                                   The functions result.
    77                                               """
    78                                           
    79                                               def decorator(f):
    80                                                   """
    81                                                   Inner decorator
    82                                                   """
    83                                           
    84                                                   @wraps(f)
    85                                                   def wrapper(*args, **kwargs):
    86                                                       """
    87                                                       Function cache
    88                                                       """
    89                                           
    90                                                       key = get_key(f, *args, **kwargs)
    91                                           
    92                                                       cached_result = cache.get(key, deserialize=deserialize)
    93                                           
    94                                                       if cached_result is None:
    95                                                           function_result = f(*args, **kwargs)
    96                                           
    97                                                           cache.set(key, function_result, timeout=timeout, serialize=serialize)
    98                                                           return function_result
    99                                           
   100                                                       return cached_result
   101                                           
   102                                                   return wrapper
   103                                           
   104                                               return decorator

File: /home/vagrant/api/api/cache_redis.py
Function: wrapper at line 130
Total time: 61.3591 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   130                                                   @wraps(f)
   131                                                   def wrapper(*args, **kwargs):
   132                                                       """
   133                                                       Function cache
   134                                                       """
   135                                           
   136     23651       402996     17.0      0.7              key = get_key(f, *args, **kwargs)
   137                                           
   138     23651     27015151   1142.2     44.0              cached_result = get(key, deserialize=deserialize)
   139                                           
   140     23651        30306      1.3      0.0              if cached_result is None:
   141      6797     14842035   2183.6     24.2                  function_result = f(*args, **kwargs)
   142                                           
   143      6797     19048282   2802.5     31.0                  set(key, function_result, timeout=timeout, serialize=serialize)
   144      6797        10535      1.5      0.0                  return function_result
   145                                           
   146     16854         9798      0.6      0.0              return cached_result

File: /home/vagrant/api/api/problem.py
Function: submit_key at line 263
Total time: 78.5709 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   263                                           def submit_key(tid, pid, key, uid=None, ip=None):
   264                                               """
   265                                               User problem submission. Problem submission is inserted into the database.
   266                                           
   267                                               Args:
   268                                                   tid: user's team id
   269                                                   pid: problem's pid
   270                                                   key: answer text
   271                                                   uid: user's uid
   272                                               Returns:
   273                                                   A dict.
   274                                                   correct: boolean
   275                                                   points: number of points the problem is worth.
   276                                                   message: message returned from the grader.
   277                                               """
   278                                           
   279      5536      1052940    190.2      1.3      db = api.common.get_conn()
   280      5536      2253192    407.0      2.9      validate(submission_schema, {"tid": tid, "pid": pid, "key": key})
   281                                           
   282      5536     54004156   9755.1     68.7      if pid not in get_unlocked_pids(tid):
   283                                                   raise InternalException("You can't submit flags to problems you haven't unlocked.")
   284                                           
   285      5536      2922724    527.9      3.7      if pid in get_solved_pids(tid):
   286                                                   raise WebException("You have already solved this problem.")
   287                                           
   288      5536      6592044   1190.8      8.4      user = api.user.get_user(uid=uid)
   289      5536        10234      1.8      0.0      if user is None:
   290                                                   raise InternalException("User submitting flag does not exist.")
   291      5536         7401      1.3      0.0      uid = user["uid"]
   292                                           
   293      5536       283042     51.1      0.4      result = grade_problem(pid, key, uid)
   294                                           
   295      5536       120077     21.7      0.2      problem = get_problem(pid=pid)
   296                                           
   297      5536         7723      1.4      0.0      submission = {
   298      5536         6227      1.1      0.0          'uid': uid,
   299      5536         5753      1.0      0.0          'tid': tid,
   300      5536        94209     17.0      0.1          'timestamp': datetime.now(),
   301      5536         7348      1.3      0.0          'pid': pid,
   302      5536         5868      1.1      0.0          'ip': ip,
   303      5536         5763      1.0      0.0          'key': key,
   304      5536         7373      1.3      0.0          'category': problem['category'],
   305      5536         6431      1.2      0.0          'correct': result['correct']
   306                                               }
   307                                           
   308      5536      5458312    986.0      6.9      if (key, pid) in [(submission["key"], submission["pid"]) for submission in  get_submissions(tid=tid)]:
   309                                                   raise WebException("You or one of your teammates has already tried this solution.")
   310                                           
   311      5536      4080982    737.2      5.2      db.submissions.insert(submission)
   312                                           
   313      5536        10117      1.8      0.0      if submission["correct"]:
   314      5536        10618      1.9      0.0          api.cache.invalidate_memoization(
   315      5536         6075      1.1      0.0              get_submissions,
   316      5536      1603542    289.7      2.0              tid=submission["tid"], correctness=True, uid=None, category=None
   317                                                   )
   318                                           
   319      5536         8758      1.6      0.0      return result

File: /home/vagrant/api/api/problem.py
Function: get_solved_pids at line 496
Total time: 35.1599 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   496                                           def get_solved_pids(tid, uid=None, category=None):
   497                                               """
   498                                               Gets the solved pids for a given team or user.
   499                                           
   500                                               Args:
   501                                                   tid: The team id
   502                                                   category: Optional parameter to restrict which problems are returned
   503                                               Returns:
   504                                                   List of solved problem ids
   505                                               """
   506                                           
   507     12072     35159914   2912.5    100.0      return [sub['pid'] for sub in get_submissions(tid=tid, uid=uid, category=category, correctness=True)]

File: /home/vagrant/api/api/problem.py
Function: get_solved_problems at line 510
Total time: 32.8374 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   510                                           def get_solved_problems(tid, uid=None, category=None):
   511                                               """
   512                                               Gets the solved problems for a given team or user.
   513                                           
   514                                               Args:
   515                                                   tid: The team id
   516                                                   category: Optional parameter to restrict which problems are returned
   517                                               Returns:
   518                                                   List of solved problem dictionaries
   519                                               """
   520                                           
   521      6536     32837429   5024.1    100.0      return [get_problem(pid) for pid in get_solved_pids(tid, uid, category)]

File: /home/vagrant/api/api/problem.py
Function: get_unlocked_pids at line 523
Total time: 52.6237 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   523                                           def get_unlocked_pids(tid, category=None):
   524                                               """
   525                                               Gets the unlocked pids for a given team.
   526                                           
   527                                               Args:
   528                                                   tid: The team id
   529                                                   category: Optional parameter to restrict which problems are returned
   530                                               Returns:
   531                                                   List of unlocked problem ids
   532                                               """
   533                                           
   534      5536     31150424   5626.9     59.2      solved = get_solved_problems(tid, category)
   535                                           
   536      5536         6471      1.2      0.0      unlocked = []
   537    321088     13894104     43.3     26.4      for problem in get_all_problems():
   538    315552       326686      1.0      0.6          if 'weightmap' not in problem or 'threshold' not in problem:
   539                                                       unlocked.append(problem['pid'])
   540                                                   else:
   541    315552      6708403     21.3     12.7              weightsum = sum(problem['weightmap'].get(p['pid'], 0) for p in solved)
   542    315552       347813      1.1      0.7              if weightsum >= problem['threshold']:
   543     59398       183745      3.1      0.3                  unlocked.append(problem['pid'])
   544                                           
   545      5536         6065      1.1      0.0      return unlocked

File: /home/vagrant/api/api/scoreboard.py
Function: get_score at line 10
Total time: 1.73223 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           def get_score(tid=None, uid=None):
    11                                               """
    12                                               Get the score for a user or team.
    13                                               Looks for a cached score, if not found we query all correct submissions by the team and add up their scores if they exist. Cache the result.
    14                                           
    15                                               Args:
    16                                                   tid: The team id
    17                                                   uid: The user id
    18                                               Returns:
    19                                                   The users's or team's score
    20                                               """
    21                                           
    22      1000      1731368   1731.4    100.0      score = sum([problem['score'] for problem in api.problem.get_solved_problems(tid=tid, uid=uid)])
    23                                           
    24      1000          865      0.9      0.0      return score

