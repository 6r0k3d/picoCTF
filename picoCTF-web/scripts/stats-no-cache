5.021 run_profiling  profile.py:68
├─ 4.801 submit_key  api/problem.py:263
│  ├─ 2.423 get_unlocked_pids  api/problem.py:523
│  │  ├─ 1.174 get_all_problems  api/problem.py:477
│  │  │  ├─ 0.875 __next__  pymongo/cursor.py:1034
│  │  │  │  ├─ 0.572 _refresh  pymongo/cursor.py:960
│  │  │  │  │  ├─ 0.483 __send_message  pymongo/cursor.py:885
│  │  │  │  │  │  ├─ 0.289 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │  │  │  │  │  └─ 0.202 __send_and_receive  pymongo/mongo_client.py:1166
│  │  │  │  │  │  └─ 0.172 _unpack_response  pymongo/helpers.py:76
│  │  │  │  │  └─ 0.054 __query_spec  pymongo/cursor.py:286
│  │  │  │  └─ 0.067 _fix_outgoing  pymongo/database.py:263
│  │  │  ├─ 0.089 get_conn  api/common.py:32
│  │  │  │  └─ 0.086 alive  pymongo/mongo_client.py:963
│  │  │  ├─ 0.070 __getattr__  pymongo/database.py:193
│  │  │  │  └─ 0.067 __init__  pymongo/collection.py:51
│  │  │  │     └─ 0.051 __init__  pymongo/common.py:351
│  │  │  └─ 0.063 find  pymongo/collection.py:725
│  │  │     └─ 0.055 __init__  pymongo/cursor.py:67
│  │  ├─ 0.581 get_solved_problems  api/problem.py:510
│  │  │  └─ 0.530 get_solved_pids  api/problem.py:496
│  │  │     └─ 0.523 get_submissions  api/problem.py:322
│  │  │        ├─ 0.285 __next__  pymongo/cursor.py:1034
│  │  │        │  └─ 0.269 _refresh  pymongo/cursor.py:960
│  │  │        │     └─ 0.236 __send_message  pymongo/cursor.py:885
│  │  │        │        └─ 0.207 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │        │           └─ 0.135 __send_and_receive  pymongo/mongo_client.py:1166
│  │  │        ├─ 0.084 __getattr__  pymongo/database.py:193
│  │  │        │  └─ 0.081 __init__  pymongo/collection.py:51
│  │  │        │     └─ 0.053 __init__  pymongo/common.py:351
│  │  │        ├─ 0.070 find  pymongo/collection.py:725
│  │  │        │  └─ 0.058 __init__  pymongo/cursor.py:67
│  │  │        └─ 0.070 get_conn  api/common.py:32
│  │  │           └─ 0.068 alive  pymongo/mongo_client.py:963
│  │  └─ 0.262 <genexpr>  api/problem.py:541
│  ├─ 0.548 get_solved_pids  api/problem.py:496
│  │  └─ 0.538 get_submissions  api/problem.py:322
│  │     ├─ 0.292 __next__  pymongo/cursor.py:1034
│  │     │  └─ 0.259 _refresh  pymongo/cursor.py:960
│  │     │     └─ 0.222 __send_message  pymongo/cursor.py:885
│  │     │        └─ 0.191 _send_message_with_response  pymongo/mongo_client.py:1179
│  │     │           ├─ 0.096 __send_and_receive  pymongo/mongo_client.py:1166
│  │     │           └─ 0.052 maybe_return_socket  pymongo/pool.py:392
│  │     ├─ 0.115 get_conn  api/common.py:32
│  │     │  └─ 0.114 alive  pymongo/mongo_client.py:963
│  │     ├─ 0.064 __getattr__  pymongo/database.py:193
│  │     │  └─ 0.062 __init__  pymongo/collection.py:51
│  │     └─ 0.051 find  pymongo/collection.py:725
│  ├─ 0.528 get_submissions  api/problem.py:322
│  │  ├─ 0.304 __next__  pymongo/cursor.py:1034
│  │  │  └─ 0.275 _refresh  pymongo/cursor.py:960
│  │  │     └─ 0.256 __send_message  pymongo/cursor.py:885
│  │  │        └─ 0.226 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │           └─ 0.149 __send_and_receive  pymongo/mongo_client.py:1166
│  │  ├─ 0.106 get_conn  api/common.py:32
│  │  │  └─ 0.100 alive  pymongo/mongo_client.py:963
│  │  └─ 0.057 __getattr__  pymongo/database.py:193
│  │     └─ 0.056 __init__  pymongo/collection.py:51
│  ├─ 0.483 get_user  api/user.py:88
│  │  ├─ 0.312 find_one  pymongo/collection.py:681
│  │  │  └─ 0.255 __next__  pymongo/cursor.py:1034
│  │  │     └─ 0.243 _refresh  pymongo/cursor.py:960
│  │  │        └─ 0.222 __send_message  pymongo/cursor.py:885
│  │  │           └─ 0.169 _send_message_with_response  pymongo/mongo_client.py:1179
│  │  │              └─ 0.088 __send_and_receive  pymongo/mongo_client.py:1166
│  │  ├─ 0.096 get_conn  api/common.py:32
│  │  │  └─ 0.092 alive  pymongo/mongo_client.py:963
│  │  └─ 0.067 __getattr__  pymongo/database.py:193
│  │     └─ 0.065 __init__  pymongo/collection.py:51
│  ├─ 0.202 insert  pymongo/collection.py:291
│  │  └─ 0.116 _send_message  pymongo/mongo_client.py:1086
│  ├─ 0.192 invalidate_memoization  api/cache.py:106
│  │  └─ 0.180 delete  redis/client.py:766
│  │     └─ 0.180 execute_command  redis/client.py:522
│  │        └─ 0.121 send_command  redis/connection.py:530
│  │           └─ 0.073 pack_command  redis/connection.py:569
│  ├─ 0.148 validate  api/common.py:186
│  │  └─ 0.144 __call__  voluptuous.py:213
│  │     └─ 0.143 validate_dict  voluptuous.py:431
│  │        └─ 0.137 validate_mapping  voluptuous.py:258
│  │           └─ 0.072 validate_callable  voluptuous.py:548
│  ├─ 0.092 get_conn  api/common.py:32
│  │  └─ 0.088 alive  pymongo/mongo_client.py:963
│  └─ 0.070 __getattr__  pymongo/database.py:193
│     └─ 0.067 __init__  pymongo/collection.py:51
└─ 0.216 wrapper  api/cache_redis.py:130
   ├─ 0.099 get_all_team_scores  api/scoreboard.py:61
   │  └─ 0.097 get_score  api/scoreboard.py:10
   │     └─ 0.095 get_solved_problems  api/problem.py:510
   │        └─ 0.095 get_solved_pids  api/problem.py:496
   │           └─ 0.093 get_submissions  api/problem.py:322
   │              └─ 0.053 __next__  pymongo/cursor.py:1034
   │                 └─ 0.052 _refresh  pymongo/cursor.py:960
   └─ 0.095 get  api/cache_redis.py:44
      └─ 0.082 loads  bson/json_util.py:128
         └─ 0.082 loads  json/__init__.py:271
            └─ 0.081 decode  json/decoder.py:338
               └─ 0.079 raw_decode  json/decoder.py:349
                  └─ 0.067 <lambda>  bson/json_util.py:145
                     └─ 0.051 object_hook  bson/json_util.py:163
Timer unit: 1e-06 s

File: /home/vagrant/api/api/cache.py
Function: memoize at line 69
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    69                                           def memoize(timeout=0, serialize=True, deserialize=True):
    70                                               """
    71                                               Cache a function based on its arguments.
    72                                           
    73                                               Args:
    74                                                   timout: Time the result stays valid in the cache.
    75                                               Returns:
    76                                                   The functions result.
    77                                               """
    78                                           
    79                                               def decorator(f):
    80                                                   """
    81                                                   Inner decorator
    82                                                   """
    83                                           
    84                                                   @wraps(f)
    85                                                   def wrapper(*args, **kwargs):
    86                                                       """
    87                                                       Function cache
    88                                                       """
    89                                           
    90                                                       key = get_key(f, *args, **kwargs)
    91                                           
    92                                                       cached_result = cache.get(key, deserialize=deserialize)
    93                                           
    94                                                       if cached_result is None:
    95                                                           function_result = f(*args, **kwargs)
    96                                           
    97                                                           cache.set(key, function_result, timeout=timeout, serialize=serialize)
    98                                                           return function_result
    99                                           
   100                                                       return cached_result
   101                                           
   102                                                   return wrapper
   103                                           
   104                                               return decorator

File: /home/vagrant/api/api/problem.py
Function: submit_key at line 263
Total time: 4.77958 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   263                                           def submit_key(tid, pid, key, uid=None, ip=None):
   264                                               """
   265                                               User problem submission. Problem submission is inserted into the database.
   266                                           
   267                                               Args:
   268                                                   tid: user's team id
   269                                                   pid: problem's pid
   270                                                   key: answer text
   271                                                   uid: user's uid
   272                                               Returns:
   273                                                   A dict.
   274                                                   correct: boolean
   275                                                   points: number of points the problem is worth.
   276                                                   message: message returned from the grader.
   277                                               """
   278                                           
   279       480        88353    184.1      1.8      db = api.common.get_conn()
   280       480       181218    377.5      3.8      validate(submission_schema, {"tid": tid, "pid": pid, "key": key})
   281                                           
   282       480      2428390   5059.1     50.8      if pid not in get_unlocked_pids(tid):
   283                                                   raise InternalException("You can't submit flags to problems you haven't unlocked.")
   284                                           
   285       480       531379   1107.0     11.1      if pid in get_solved_pids(tid):
   286                                                   raise WebException("You have already solved this problem.")
   287                                           
   288       480       489949   1020.7     10.3      user = api.user.get_user(uid=uid)
   289       480          848      1.8      0.0      if user is None:
   290                                                   raise InternalException("User submitting flag does not exist.")
   291       480          660      1.4      0.0      uid = user["uid"]
   292                                           
   293       480        33724     70.3      0.7      result = grade_problem(pid, key, uid)
   294                                           
   295       480        10359     21.6      0.2      problem = get_problem(pid=pid)
   296                                           
   297       480          669      1.4      0.0      submission = {
   298       480          602      1.3      0.0          'uid': uid,
   299       480          517      1.1      0.0          'tid': tid,
   300       480         7848     16.4      0.2          'timestamp': datetime.now(),
   301       480          609      1.3      0.0          'pid': pid,
   302       480          494      1.0      0.0          'ip': ip,
   303       480          562      1.2      0.0          'key': key,
   304       480         1491      3.1      0.0          'category': problem['category'],
   305       480          582      1.2      0.0          'correct': result['correct']
   306                                               }
   307                                           
   308       480       523578   1090.8     11.0      if (key, pid) in [(submission["key"], submission["pid"]) for submission in  get_submissions(tid=tid)]:
   309                                                   raise WebException("You or one of your teammates has already tried this solution.")
   310                                           
   311       480       336567    701.2      7.0      db.submissions.insert(submission)
   312                                           
   313       480          872      1.8      0.0      if submission["correct"]:
   314       480          895      1.9      0.0          api.cache.invalidate_memoization(
   315       480          507      1.1      0.0              get_submissions,
   316       480       138128    287.8      2.9              tid=submission["tid"], correctness=True, uid=None, category=None
   317                                                   )
   318                                           
   319       480          776      1.6      0.0      return result

File: /home/vagrant/api/api/problem.py
Function: get_all_problems at line 477
Total time: 1.14132 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   477                                           def get_all_problems(category=None, show_disabled=False):
   478                                               """
   479                                               Gets all of the problems in the database.
   480                                           
   481                                               Args:
   482                                                   category: Optional parameter to restrict which problems are returned
   483                                                   show_disabled: Boolean indicating whether or not to show disabled problems.
   484                                               Returns:
   485                                                   List of problems from the database
   486                                               """
   487                                           
   488       480        84830    176.7      7.4      db = api.common.get_conn()
   489                                           
   490       480          734      1.5      0.1      match = {"disabled": show_disabled}
   491       480          379      0.8      0.0      if category is not None:
   492                                                   match.update({'category': category})
   493                                           
   494       480      1055380   2198.7     92.5      return list(db.problems.find(match, {"_id":0}).sort('score', pymongo.ASCENDING))

File: /home/vagrant/api/api/problem.py
Function: get_solved_pids at line 496
Total time: 1.1448 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   496                                           def get_solved_pids(tid, uid=None, category=None):
   497                                               """
   498                                               Gets the solved pids for a given team or user.
   499                                           
   500                                               Args:
   501                                                   tid: The team id
   502                                                   category: Optional parameter to restrict which problems are returned
   503                                               Returns:
   504                                                   List of solved problem ids
   505                                               """
   506                                           
   507      1060      1144804   1080.0    100.0      return [sub['pid'] for sub in get_submissions(tid=tid, uid=uid, category=category, correctness=True)]

File: /home/vagrant/api/api/problem.py
Function: get_solved_problems at line 510
Total time: 0.667355 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   510                                           def get_solved_problems(tid, uid=None, category=None):
   511                                               """
   512                                               Gets the solved problems for a given team or user.
   513                                           
   514                                               Args:
   515                                                   tid: The team id
   516                                                   category: Optional parameter to restrict which problems are returned
   517                                               Returns:
   518                                                   List of solved problem dictionaries
   519                                               """
   520                                           
   521       580       667355   1150.6    100.0      return [get_problem(pid) for pid in get_solved_pids(tid, uid, category)]

File: /home/vagrant/api/api/problem.py
Function: get_unlocked_pids at line 523
Total time: 2.30991 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   523                                           def get_unlocked_pids(tid, category=None):
   524                                               """
   525                                               Gets the unlocked pids for a given team.
   526                                           
   527                                               Args:
   528                                                   tid: The team id
   529                                                   category: Optional parameter to restrict which problems are returned
   530                                               Returns:
   531                                                   List of unlocked problem ids
   532                                               """
   533                                           
   534       480       575265   1198.5     24.9      solved = get_solved_problems(tid, category)
   535                                           
   536       480          691      1.4      0.0      unlocked = []
   537     27840      1189045     42.7     51.5      for problem in get_all_problems():
   538     27360        27082      1.0      1.2          if 'weightmap' not in problem or 'threshold' not in problem:
   539                                                       unlocked.append(problem['pid'])
   540                                                   else:
   541     27360       477733     17.5     20.7              weightsum = sum(problem['weightmap'].get(p['pid'], 0) for p in solved)
   542     27360        27623      1.0      1.2              if weightsum >= problem['threshold']:
   543      4014        11479      2.9      0.5                  unlocked.append(problem['pid'])
   544                                           
   545       480          991      2.1      0.0      return unlocked

File: /home/vagrant/api/api/scoreboard.py
Function: get_score at line 10
Total time: 0.096577 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           def get_score(tid=None, uid=None):
    11                                               """
    12                                               Get the score for a user or team.
    13                                               Looks for a cached score, if not found we query all correct submissions by the team and add up their scores if they exist. Cache the result.
    14                                           
    15                                               Args:
    16                                                   tid: The team id
    17                                                   uid: The user id
    18                                               Returns:
    19                                                   The users's or team's score
    20                                               """
    21                                           
    22       100        96472    964.7     99.9      score = sum([problem['score'] for problem in api.problem.get_solved_problems(tid=tid, uid=uid)])
    23                                           
    24       100          105      1.1      0.1      return score

