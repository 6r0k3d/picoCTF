"""
Load test picoCTF platform functionality.

Requires a connection to a MongoDB database populated with test user
credentials generated by the registration locustfile (registration.py)
"""

import random

from locust import HttpLocust, task, TaskSet

from util import get_db, LOGIN_ENDPOINT, LOGOUT_ENDPOINT, SHELL_PAGE_URL, GAME_PAGE_URL, SCOREBOARDS_ENDPOINT, GROUPS_ENDPOINT
from demographics_generator import get_affiliation


def acquire_user(properties={}):
    """Retrieve an available test user with the specified properties."""
    properties['in_use'] = {'$in': [False, None]}
    return get_db().users.find_one_and_update(
        properties, {'$set': {'in_use': True}}, {'_id': 0})

def release_user(username):
    """Release a test user for usage by other threads."""
    get_db().users.find_one_and_update(
        {'username': username}, {'$set': {'in_use': False}})

def login(l, username=None, password=None):
    if not username:
        user = acquire_user()
    else:
        user = dict()
        user['username'] = username
        user['password'] = password
    l.client.post(LOGIN_ENDPOINT, json={
        'username': user['username'],
        'password': user['password']
    })
    return user['username']

def logout(l):
    l.client.get(LOGOUT_ENDPOINT)

def get_valid_scoreboard_endpoint(l):
    scoreboards = l.client.get(SCOREBOARDS_ENDPOINT).json()
    groups = l.client.get(GROUPS_ENDPOINT).json()

    # Load the initial page of one of the scoreboards
    possible_boards = set()
    for board in scoreboards:
        possible_boards.add({'scoreboard', board['sid']})
    for group in groups:
        possible_boards.add({'group', group['gid']})

    board = random.choice(possible_boards)
    if board['scoreboard']:
        endpoint = SCOREBOARDS_ENDPOINT + '/' + board['scoreboard'] + \
            '/scoreboard'
    else:
        endpoint = GROUPS_ENDPOINT + '/' + board['group'] + '/scoreboard'
    return endpoint

class LoadTestingTasks(TaskSet):

    @task
    def load_shell_page(l):
        username = login(l)
        try:
            l.client.get(SHELL_PAGE_URL)
            logout(l)
        finally:
            release_user(username)

    @task
    def load_game_page(l):
        username = login(l)
        try:
            l.client.get(GAME_PAGE_URL)
            logout(l)
        finally:
            release_user(username)

    @task
    class ScoreboardTasks(TaskSet):

        @task
        def load_scoreboard_pages(l):
            """Load several pages of a random scoreboard."""
            username = login(l)
            try:
                endpoint = get_valid_scoreboard_endpoint(l)
                initial_page_res = l.client.get(endpoint).json()
                for i in range(0, random.randrange(1, 10)):
                    p = random.randrange(1, initial_page_res['total_pages'] + 1)
                    l.client.get(endpoint + '?page=' + p)
                logout(l)
            finally:
                release_user(username)
                l.interrupt()

        @task
        def load_filtered_scoreboard_pages(l):
            """Load several pages of a filtered random scoreboard."""
            username = login(l)
            try:
                endpoint = get_valid_scoreboard_endpoint(l)
                initial_page_res = l.client.get(endpoint).json()
                endpoint += '&search=' + get_affiliation()
                for i in range(0, random.randrange(1, 10)):
                    p = random.randrange(1, initial_page_res['total_pages'] + 1)
                    l.client.get(endpoint + '&page=' + p)
                logout(l)
            finally:
                release_user(username)
                l.interrupt()


class LoadTestingLocust(HttpLocust):
    task_set = LoadTestingTasks
    min_wait = 1000
    max_wait = 4000
